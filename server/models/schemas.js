const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const AddressSchema =  new Schema({
    phones:[{
        type:{type:String},
        value: String
    }],
    email: String,
    city: String,
    subcity:String,
    woreda: String,
    houseNumber: String,
    locationText: String,
    gps:{
        latitude: String,
        longitude: String,
    },
    remark: String
})
const EducationSchema = new Schema({
    level: String,
    schoolName: String,
    status: String,
    schoolType: String,
    isDistance: Boolean,
    grade: Number,
    yearStart: Number,
    yearEnd: Number,
    active: Boolean,
    distance: Number,
    fee: Number

});


const FamilySchema = new Schema({
    relationship: String,
    name: String,
    fatherName: String,
    gFatherName: String,
    gender: String,
    birthDate: Date,
    health: {
        generalCondition: String,
        remark: String,
        history: [String]
    },
    photo: String,
    profession: String,
    workPlace: String,
    isIncomeProvider: Boolean,
    monthlyIncome: Number,
    currentEducation: EducationSchema,
    livingTogether: Boolean,
    notAlive: Boolean,
    isFinadoContact:Boolean,
    bankAccount: {
        bankName:String,
        accountNumber:String
    },
    address: AddressSchema,



})


const SponsorSchema = new Schema({
    name: String,
    fatherName: String,
    gFatherName: String,
    gender: String,
    address: AddressSchema


})

const FileSchema = new Schema({
    filePath: String,
    title: String,
    date: Date,
    description: String

})


const PlaceSchema = new Schema ({
    type: String,
    name: String,
    monthlyCost: Number,
    address: AddressSchema,
    numberOfPeople: String,
    livingConditions: [{
        name: String,
        available: Boolean
    }],
    photo: String,
    remark: String,

})

const StorySchema = new Schema ( {
    story: String,
    dream: String,
    hobby: String,
    governmentApproved: Boolean,
    photos: [FileSchema],
    files: [FileSchema]

})

const OTDetailSchema = new Schema ({
    startDate: Date,
    endDate: Date,
    hrs: Number,
    days: Number,
    type:String,
    startTime: Date,
    endTime: Date,
})

const AbsenceDetailSchema = new Schema ({
    startDate: Date,
    type:String,
   })

const OvertimeRecordSchema = new Schema ( {
    member: {
        id: String,
        fullName: String,
        mateId:String,
    },
    afterWork: Number,
    night:Number,
    sunday: Number,
    hollyDay: Number,
    other: Number,
    totalPayHours: Number,
    temp:{},
    autoGenerated: Boolean,
    details:[OTDetailSchema]

})
const AbsenceRecordSchema = new Schema ( {
    member: {
        id: String,
        fullName: String,
        mateId:String,
    },
    leaveDays : Number,
    absentDays: Number,
    daysWorked: Number,
    temp:{},
    autoGenerated: Boolean,
    details:[AbsenceDetailSchema]

})

const MemberSchema = new Schema({
    mateId: {
        type: String,
        unique:true
    },
    name: String,
    orgId:String,
    fatherName: String,
    gFatherName: String,
    gender: String,
    birthDate: Date,
    placeOfBirth: String,
    health: {
        generalCondition: String,
        remark: String,
        history: [String]
    },
    photo: String,
    currentEducation: EducationSchema,
    previousEducations: [EducationSchema],
    families: [FamilySchema],
    createdDate: {
        type: Date,
        default: Date.now
    },
    tinNo:String,
    pensionNo:String,
    bankAccounts: [{
        type:{type:String},
        value: String
    }],
    joinTeam: String,
    currentTeam: String,
    employmentType: {
        type: String,
        enum : ['Casual','PartTime','FullTime'],
        index: true,
        default: 'FullTime'
    },
    contractType: {
        type: String,
        enum : ['FixedTerm','Permanent','Piecework'],
        default: 'FixedTerm'
    },
    startDate: Date,
    endDate:Date,
    duration: Number,
    period: String,
    position:String,
    joinRemark: String,
    citizenship:String,
    extraOT: {
        type: Number,
        index: true
    },
    fullTransport:Boolean,
    fullOT: Boolean,
    leaveInfo: {
        remainingDays:Number,
        daysTaken:Number,
        totalDaysTaken:Number,

    },
    address: AddressSchema,
    jobTitle: String,
    earning: {
        rate: Number,
        period: {
            type: String,
            enum : ['day','week','month'],
            default: 'month'
        },
        additionalEarnings: [{
            type:{type:String},
            name:String,
            value:Number
        }]
    },
    joinType: {
        type: String,
        enum : ['Transfer','ReEmployment','Employment'],
        default: 'Employment'
    },
    martialStatus: String,
    status: {
        type: String,
        enum : ['Active','Resigned', 'ContractEnded', 'Dismissed','Retired', 'LaidOff', 'Excluded','Exempt'],
        default: 'Active'
    },
    annualLeaveBalance: Number,
    motherName: String,
    joinRequests: [ { type: Schema.Types.ObjectId, ref: 'MemberJoinRequest' }],
    payrollStatus:  {
        type:String,
        enum : ['Pending','Applied','Avoided', 'Updated'],
        default: 'Pending'
    },
    attendance: {
        attendanceType: String,
        devices: [{deviceSN: String, inDeviceId: String}],
        schedules: [Object]
    },
    updateRequests: [ { type: Schema.Types.ObjectId, ref: 'MemberUpdateRequest' }],

}, {timestamps:true, excludeIndexes: true});


module.exports = {MemberSchema, EducationSchema, FamilySchema,PlaceSchema,AddressSchema,StorySchema,SponsorSchema, FileSchema,OvertimeRecordSchema, AbsenceRecordSchema}
